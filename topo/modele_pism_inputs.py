# Prepares inputs for a ModelE-PISM coupled run
#
# Eg: python3 ../topo/modele_pism_inputs.py --out e17 --pism ../pism/std-greenland/g20km_10ka.nc

import argparse
import subprocess
import contextlib, os

@contextlib.contextmanager
def pushd(dir):
    curdir= os.getcwd()
    os.chdir(dir)
    try:
        yield
    finally:
        os.chdir(curdir)

def make_grid(grid_cmd, grid_fname):
    """Returns True if it ran grid creation command"""
    print('***************** {}'.format(grid_fname))
    if os.path.exists(grid_fname):
        return False

    cmd = grid_cmd + ['-o', grid_fname]
    print(' '.join(cmd))
    ret = subprocess.run(cmd)
    if ret != 0:
        raise RuntimError("Command failed: {}".format(cmd))
    return True


makefile_str = """
# Recipe for generating TOPO files from PISM state files.
# This Makefile is machine-generated by modele_pism_inputs.py

all : topoa.nc

# ----------------- Things we make here

{exgrid}: {gridA} {gridI}
	overlap {gridA} {gridI} -o {exgrid}

gcmO.nc : {exgrid} {pism_state} {gridA} {gridI}
	echo '*****************************************************************'
	echo '[makefile] Assembling IceBin Input File from grids (contains loadable gcmO).'
	python3 {topo_root}/write_icebin_in_base.py {gridA} {gridI} {exgrid} {pism_state} ./gcmO.nc


topoo_merged.nc : {pism_state} gcmO.nc {global_ecO_ng} {topoo_ng}
        # Merge without squashing
	make_merged_topoo --squash_ec 0 --topoo_merged topoo_merged.nc --elevmask pism:{pism_state} --gcmO gcmO.nc --global_ecO {global_ecO_ng} --topoo {topoo_ng}
        # Merge with squashing
	# make_merged_topoo --topoo_merged topoo_merged.nc --elevmask pism:{pism_state} --gcmO gcmO.nc --global_ecO {global_ecO_ng} --topoo {topoo_ng}


topo_oc.nc : topoo_merged.nc
	python3 {topo_root}/make_topo_oc.py topoo_merged.nc -o topo_oc.nc

topoa_nc4.nc : topoo_merged.nc
	make_topoa -o topoa_nc4.nc --global_ecO topoo_merged.nc --topoo topoo_merged.nc 2>topoa_nc4.err

topoa.nc : topoa_nc4.nc
	nccopy -k classic topoa_nc4.nc topoa.nc
"""



def modele_pism_inputs(topo_root, coupled_dir, pism_state,
    gridI_cmd, gridI_leaf,
    grid_dir=None):

    """twoway_root:
        Root of the checked-out *twoway* git project / topo.  Eg: $HOME/git/twoway/topo
    coupled_dir: (OUT)
        Name of directory where intermediate files for coupled run
        inputs are written.
    gridI_cmd:  [...]
        Command line that, when run, produces the PISM grid
        NOTE: '-o <outfile.nc>' will be appended to this command line
    gridI_leaf: (OUT)
        Name of output file in which to write the PISM grid
        (leafname only, no directory)
    grid_dir: (OUT)
        Place to look for pre-generated grids (and overlaps)
    """
    if grid_dir is None:
        grid_dir = topo_root
    os.makedirs(grid_dir, exist_ok=True)

    # Create ModelE grid and other general stuff (not PISM-specific)
    gridA_leaf = 'modele_ll_g1qx1.nc'
    with pushd(topo_root):
        cmd = ['make', gridA_leaf, 'global_ecO_ng.nc', 'topoo_ng.nc']
    repl = dict(    # Used to create templated makefile
        pism_state=pism_state,
        topo_root=topo_root,
        gridA=os.path.join(topo_root, gridA_leaf),
        global_ecO_ng=os.path.join(topo_root, 'global_ecO_ng.nc'),
        topoo_ng=os.path.join(topo_root, 'topoo_ng.nc'))


    # Create the PISM grid
    gridI_fname = os.path.join(grid_dir, gridI_leaf)
    repl['gridI'] = gridI_fname
    make_grid(gridI_cmd, gridI_fname)

    # Overlap the two
    exgrid_leaf = '{}-{}'.format(os.path.splitext(gridA_leaf)[0], gridI_leaf)
    repl['exgrid'] = os.path.join(grid_dir, exgrid_leaf)

    # Do the rest
    print('************** Makefile')
    os.makedirs(coupled_dir, exist_ok=True)
    with pushd(coupled_dir):
        with open('Makefile', 'w') as fout:
            fout.write(makefile_str.format(**repl))
        cmd = ['make', 'topoa.nc', 'topo_oc.nc']
        print(' '.join(cmd))
        subprocess.run(cmd)

def main():
    topo_root = os.path.split(os.path.realpath(__file__))[0]

    parser = argparse.ArgumentParser(description='Set up input files for a Coupled ModelE - PISM run')

    parser.add_argument('--pism', dest='pism',
        required=True,
        help='PISM state file (eg after spinup)')
    parser.add_argument('--out', dest='coupled_dir',
        required=True,
        help="Name of directory for output files.  Eg: <ectl-run>/inputs")
    parser.add_argument('--pism_grid_cmd', dest='pism_grid_cmd',
        default='searise_grid --index_order searise',
        help="Command line (space-separated) required to create PISM grid.")
    parser.add_argument('--pism_grid_leaf', dest='pism_grid_leaf',
        default='sr_g20_searise.nc',
        help="Output file of PISM grid (just leafname)")
    args = parser.parse_args()
    print(args.coupled_dir)

    modele_pism_inputs(topo_root, os.path.realpath(args.coupled_dir), os.path.realpath(args.pism),
        args.pism_grid_cmd.split(' '), args.pism_grid_leaf, grid_dir=topo_root)

main()
